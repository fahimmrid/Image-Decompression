// Copyright by Adam Kinsman and Henry Ko and Nicola Nicolici
// Developed for the Digital Systems Design course (COE3DQ4)
// Department of Electrical and Computer Engineering
// McMaster University
// Ontario, Canada

`timescale 1ns/100ps
`default_nettype none

`include "define_state.h"

// This module generates the address for reading the SRAM
// in order to display the image on the screen
module milestone2 (

   input  logic            clock,
   input  logic            Resetn,
   output logic   [17:0]   M2_SRAM_address,
   
   input  logic   [15:0]   SRAM_read_data,
   input  logic            M2_start,
   
   output logic            SRAM_we_n,
   output logic   [15:0]   SRAM_write_data,
   
  // input  logic   [7:0]    DPRAM_address_a, 
//   output logic   [7:0]    DPRAM_address_b,
   
   output logic            M2_end
	
	
);
logic [6:0] address_a [2:0];
logic [6:0] address_b [2:0];
logic [31:0] write_data_a [2:0];
logic [31:0] write_data_b [2:0];
logic write_enable_a [2:0];
logic write_enable_b [2:0];
logic [31:0] read_data_a [2:0];
logic [31:0] read_data_b [2:0];
	// Instantiate RAM0
	dual_port_RAM0 dual_port_RAM_inst0 (
		.address_a ( address_a[0] ),
		.address_b ( address_b[0] ),
		.clock ( clock ),
		.data_a ( write_data_a[0]),
		.data_b ( write_data_b[0] ),
		.wren_a ( write_enable_a[0]),
		.wren_b ( write_enable_b[0] ),
		.q_a ( read_data_a[0] ),
		.q_b ( read_data_b[0] )
	);
	// Instantiate RAM1
	dual_port_RAM1 dual_port_RAM_inst1 (
		.address_a ( address_a[1] ),
		.address_b ( address_b[1] ),
		.clock ( clock ),
		.data_a ( write_data_a[1]),
		.data_b ( write_data_b[1] ),
		.wren_a ( write_enable_a[1]),
		.wren_b ( write_enable_b[1] ),
		.q_a ( read_data_a[1] ),
		.q_b ( read_data_b[1] )
	);
	// Instantiate RAM2
	dual_port_RAM2 dual_port_RAM_inst2 (
		.address_a ( address_a[2] ),
		.address_b ( address_b[2] ),
		.clock ( clock ),
		.data_a ( write_data_a[2]),
		.data_b ( write_data_b[2] ),
		.wren_a ( write_enable_a[2]),
		.wren_b ( write_enable_b[2] ),
		.q_a ( read_data_a[2] ),
		.q_b ( read_data_b[2] )
	);
	/*
		// RAM0
	 logic   [6:0]    RAM0_Address_0;
	  logic   [31:0]   Data_in_0;
	 logic            Write_en_0;
	 logic   [6:0]    RAM0_Address_1;
	  logic   [31:0]   Data_in_1;
	 logic            Write_en_1;
	 logic  [31:0]    Data_out_r0_1;
	 logic  [31:0]    Data_out_r0_2;
	
	//  RAM1
	 logic   [6:0]    RAM1_Address_2;
	  logic   [31:0]   Data_in_2;
	 logic            Write_en_2;
	 logic   [31:0]   Data_out_2;
	 logic   [6:0]    RAM1_Address_3;
	  logic   [31:0]   Data_in_3;
	 logic            Write_en_3;
	 logic   [31:0]   Data_out_3;
	
	//  RAM2
	 logic   [6:0]    RAM2_Address_4;
	  logic   [31:0]   Data_in_4;
	 logic            Write_en_4;
	 logic   [31:0]   Data_out_4;
	 logic   [6:0]    RAM2_Address_5;
	  logic   [31:0]   Data_in_5;
	 logic            Write_en_5;
	 logic   [31:0]   Data_out_5;
	
	
	*/
/* //when Y is done just go to next 2 states
enum logic [1:0]{
	Y_block,
	U_block,
	V_block
} plane_state;
*/
parameter 

pre_IDCT_Y =18'd76800, //offset for Y
pre_IDCT_U =18'd153600,
pre_IDCT_V =18'd192000;




logic [5:0] s_counter  ;  //6 bits?- 0 to 39
logic [2:0] row_index  ;
logic [2:0] column_index ;
 
logic [5:0] col_block ;
logic [4:0] row_block ;
logic [8:0] column_address;
logic [7:0] row_address;
logic [7:0] write_counter;
logic [7:0] adress_counter, adress_counter2;
logic [31:0] result;

//as diagram shown in class
//assign row_index =  s_counter [5:3] ;//fedding mul wires
//assign column_index = s_counter [2:0] ; 


assign M2_SRAM_address = (((row_address<<8) + (row_address<<6) + column_address)  + pre_IDCT_Y);// name address

assign s_counter = {row_index [2:0], column_index[2:0]};  //after ci reaches 7, resets to 0

assign column_address =  ((col_block)<<<8) + column_index;
assign row_address = ((col_block)<<<8) + row_index;


//assign column_address = {col_block, column_index}; //<<<8
//assign row_address = {row_block, row_index};


logic S_flag, V_flag, U_flag;
logic last_block;

		
milestone2_state_type M2_state;
milestone2_state_type M2_OverallState;

logic [31:0] Mult_1_op1, Mult_2_op1, Mult_3_op1, Mult_4_op1 ;
logic [31:0] Mult_1_op2, Mult_2_op2, Mult_3_op2, Mult_4_op2 ; 
logic [63:0] Mult_result_1, Mult_result_2, Mult_result_3, Mult_result_4;



assign
	Mult_result_1 = Mult_1_op1 * Mult_1_op2,
	Mult_result_2 = Mult_2_op1 * Mult_2_op2,
	Mult_result_3 = Mult_3_op1 * Mult_3_op2,
	Mult_result_4 = Mult_4_op1 * Mult_4_op2;




logic [15:0] data;

always_ff @ (posedge clock or negedge Resetn) begin
	if (Resetn == 1'b0) begin
	
		M2_state <= M2_IDLE; //go to Y_block state

		SRAM_write_data <= 16'd0;
		
		col_block  <= 6'd0;
		row_block  <= 5'd0;
	//	s_counter <= 7'd0;
		row_index  <= 3'd0;
		column_index <= 3'd0;

		last_block <= 1'b0;
		S_flag <= 1'b0;
		V_flag <= 1'b0;
		U_flag <= 1'b0;
		SRAM_we_n <= 1'b1;
	
		address_a[0] <= 7'd0;
		address_b[0] <= 7'd0;
		address_a[1] <= 7'd0;
		address_b[1] <= 7'd0;
		address_a[2] <= 7'd0;
		address_b[2] <= 7'd0;
		write_data_a[0] <= 32'd0;
		write_data_b[0] <= 32'd0;
		write_data_a[1] <= 32'd0;
		write_data_b[1] <= 32'd0;
		write_data_a[2] <= 32'd0;
		write_data_b[2] <= 32'd0;
		write_enable_a[0] <= 1'd0;
		write_enable_b[0] <= 1'd0;
		write_enable_a[1] <= 1'd0;
		write_enable_b[1] <= 1'd0;
		write_enable_a[2] <= 1'd0;
		write_enable_b[2] <= 1'd0;
		
		write_counter <= 1'b0;
		adress_counter <= 1'b0;
		adress_counter2 <= 1'b0;
		data <= 1'b0;
		result <= 1'b0;
	end else begin
		if (~M2_start) begin
	
			SRAM_write_data <= 16'd0;
			last_block <= 1'b0;
			S_flag <= 1'b0;
			V_flag <= 1'b0;
			U_flag <= 1'b0;
			SRAM_we_n <= 1'b1;
			
			col_block  <= 6'd0;
			row_block  <= 5'd0;
		  //s_counter <= 7'd0;
			row_index  <= 3'd0;
			column_index <= 3'd0;
	
			address_a[0] <= 7'd0;
			address_b[0] <= 7'd0;
			address_a[1] <= 7'd0;
			address_b[1] <= 7'd0;
			address_a[2] <= 7'd0;
			address_b[2] <= 7'd0;
			write_data_a[0] <= 32'd0;
			write_data_b[0] <= 32'd0;
			write_data_a[1] <= 32'd0;
			write_data_b[1] <= 32'd0;
			write_data_a[2] <= 32'd0;
			write_data_b[2] <= 32'd0;
			write_enable_a[0] <= 1'd0;
			write_enable_b[0] <= 1'd0;
			write_enable_a[1] <= 1'd0;
			write_enable_b[1] <= 1'd0;
			write_enable_a[2] <= 1'd0;
			write_enable_b[2] <= 1'd0;
			
			adress_counter <= 1'b0;
			result <= 1'b0;
			M2_state <= M2_IDLE;
			
		end else begin
			case (M2_state)
			M2_IDLE: begin
			  
				last_block <= 1'b0;
				S_flag <= 1'b0;
				//s_counter <= 1'b0;
				M2_state <= M2_DELAY;
				
			end

			M2_DELAY: begin
			
				M2_state <= M2_FETCH0;
			  
			  end

			M2_FETCH0 : begin
				column_index += 1'b1;
				write_enable_a[0] <= 1'b0;
				M2_state <= M2_FETCH1;
			//s_counter <= s_counter + 1'd1;
			
			end
			
			M2_FETCH1 : begin
				M2_state <= SRAM_DELAY1;
				// address_a[0] <= 7'b1111111; // we set this to overflow to 0, 2cc write data at 0 location
			end
			
			
			SRAM_DELAY1: begin
			
				data <= SRAM_read_data;
				M2_state <= M2_FETCH2;
			end
			
			M2_FETCH2 : begin
				write_enable_a[0] <= 1'b1;//
				address_a[0] <= write_counter;//dp adress
				write_data_a [0] <= {data, SRAM_read_data}; //go to 16 bit of write data
				column_index <= column_index + 1'b1;
				write_counter <= write_counter + 1'b1;
				
				if(column_index == 3'd7) begin
					row_index <= row_index + 1'b1;
					column_index <= 1'b0;
				end
					
				M2_state <= M2_FETCH0;
				
				if(column_index == 3'd7 && row_index == 3'd7) begin
					M2_state <= END; //change this later
					//M2_state <= M2_COMPUTE_T_L0
					write_counter <= 1'b0;
					column_index <= 1'b0;                //resets
					row_index <= 1'b0;            
					if(col_block == 6'd39)begin
						col_block <= 1'b0;
						row_block <= row_block + 1'b1;  //increasing blocks
					end else
						col_block <= col_block + 1'b1;
				/*	if(row_block == 8'd29 && )begin
						row_block <= 1'b0;
						col_block <= col_block + 1'b1;	//do AFTER
						
						*/
			    end

		    end
//--------------------------------Compute T----------------------------------
			M2_COMPUTE_T0 : begin
				write_enable_a[0] <= 1'b0;
				address_a[0] <= adress_counter; //adress we are reading
				address_b[0] <= adress_counter + 1'b1;
				
				address_a[1] <= adress_counter;
				address_b[1] <= adress_counter + 1'b1;
				adress_counter <= adress_counter + 2'd2;
				M2_state <= M2_COMPUTE_T1;

			end
			
			M2_COMPUTE_T1: begin
				address_a[0] <= adress_counter;//FOR s'
				address_b[0] <= adress_counter + 1'b1;
				
				address_a[1] <= adress_counter;
				address_b[1] <= adress_counter + 1'b1;
				adress_counter <= adress_counter + 2'd2;
				M2_state <= M2_COMPUTE_T2;
			end
			
			M2_COMPUTE_T2: begin
				address_a[0] <= adress_counter;
				address_b[0] <= adress_counter + 1'b1;
				
				address_a[1] <= adress_counter;
				address_b[1] <= adress_counter + 1'b1;
				adress_counter <= adress_counter + 2'd2;
				M2_state <= M2_COMPUTE_T3;
			end
			
			M2_COMPUTE_T3: begin
			/*	Mult_1_op1 <= read_data_a[0][31:16];//S
				Mult_1_op2 <= read_data_a[1][31:16];//C
				Mult_2_op1 <= read_data_a[0][15:0];
				Mult_2_op2 <= read_data_a[1][15:0];
				Mult_3_op1 <= read_data_b[0][31:16];
				Mult_3_op2 <= read_data_b[1][31:16];
				Mult_4_op1 <= read_data_b[0][15:0];
				Mult_4_op2 <= read_data_b[1][15:0];
				
				*/
				
				address_a[0] <= adress_counter;
				address_b[0] <= adress_counter + 1'b1;
				
				address_a[1] <= adress_counter;
				address_b[1] <= adress_counter + 1'b1;
				adress_counter <= adress_counter + 2'd2;
				
				M2_state <= M2_COMPUTE_T4;
				
			end
			
			M2_COMPUTE_T4: begin
			/*	Mult_1_op1 <= read_data_a[0][31:16];
				Mult_1_op2 <= read_data_a[1][31:16];
				Mult_2_op1 <= read_data_a[0][15:0];
				Mult_2_op2 <= read_data_a[1][15:0];
				Mult_3_op1 <= read_data_b[0][31:16];
				Mult_3_op2 <= read_data_b[1][31:16];
				Mult_4_op1 <= read_data_b[0][15:0];
				Mult_4_op2 <= read_data_b[1][15:0];
				
				*/
				
				result <= Mult_result_1+Mult_result_2+Mult_result_3+Mult_result_4;
				write_enable_a[2] <= 1'b0;
				
				address_a[0] <= adress_counter;
				address_b[0] <= adress_counter + 1'b1;
				
				address_a[1] <= adress_counter;
				address_b[1] <= adress_counter + 1'b1;
				adress_counter <= adress_counter + 2'd2;
				
				M2_state <= M2_COMPUTE_T5;
				
				if(adress_counter == 8'd30)
					M2_state <= M2_COMPUTE_T6;
				
			end
			
			M2_COMPUTE_T5: begin
				/*Mult_1_op1 <= read_data_a[0][31:16];
				Mult_1_op2 <= read_data_a[1][31:16];
				Mult_2_op1 <= read_data_a[0][15:0];
				Mult_2_op2 <= read_data_a[1][15:0];
				Mult_3_op1 <= read_data_b[0][31:16];
				Mult_3_op2 <= read_data_b[1][31:16];
				Mult_4_op1 <= read_data_b[0][15:0];
				Mult_4_op2 <= read_data_b[1][15:0];*/
				
				
				write_enable_a[2] <= 1'b1;
				write_data_a[2] <= result +Mult_result_1+Mult_result_2+Mult_result_3+Mult_result_4;
				address_a[2] <= write_counter;
				write_counter <= write_counter + 1'b1;
				
				address_a[0] <= adress_counter;
				address_b[0] <= adress_counter + 1'b1;
				
				address_a[1] <= adress_counter;
				address_b[1] <= adress_counter + 1'b1;
				adress_counter <= adress_counter + 2'd2;
				
				M2_state <= M2_COMPUTE_T4;
				

				
			end
			
			M2_COMPUTE_T6: begin
				
			/*	Mult_1_op1 <= read_data_a[0][31:16];
				Mult_1_op2 <= read_data_a[1][31:16];
				Mult_2_op1 <= read_data_a[0][15:0];
				Mult_2_op2 <= read_data_a[1][15:0];
				Mult_3_op1 <= read_data_b[0][31:16];
				Mult_3_op2 <= read_data_b[1][31:16];
				Mult_4_op1 <= read_data_b[0][15:0];
				Mult_4_op2 <= read_data_b[1][15:0];
				
				*/
				
				
				write_enable_a[2] <= 1'b1;
				write_data_a[2] <= result +Mult_result_1+Mult_result_2+Mult_result_3+Mult_result_4;
				address_a[2] <= write_counter;
				write_counter <= write_counter + 1'b1;
				
				M2_state <= M2_COMPUTE_T7;
			end
			
			M2_COMPUTE_T7: begin
			/*	Mult_1_op1 <= read_data_a[0][31:16];
				Mult_1_op2 <= read_data_a[1][31:16];
				Mult_2_op1 <= read_data_a[0][15:0];
				Mult_2_op2 <= read_data_a[1][15:0];
				Mult_3_op1 <= read_data_b[0][31:16];
				Mult_3_op2 <= read_data_b[1][31:16];
				Mult_4_op1 <= read_data_b[0][15:0];
				Mult_4_op2 <= read_data_b[1][15:0];*/
			
				result <= Mult_result_1 + Mult_result_2+Mult_result_3+Mult_result_4;
				write_enable_a[2] <= 1'b0;
				M2_state <= M2_COMPUTE_T8;
				
			end
			
			M2_COMPUTE_T8 : begin
				write_enable_a[2] <= 1'b1;
				write_data_a[2] <= result +Mult_result_1+Mult_result_2+Mult_result_3+Mult_result_4;
				address_a[2] <= write_counter;
				
				write_counter <= 1'b0;
				adress_counter <= 1'b0;  //resets
				
				
				M2_state <= END;
			end
			
			
			END: begin
				write_enable_a[0] <= 1'b1;
				M2_end <= 1'b1;
			
			
			end
			
	
			default: M2_state <= M2_IDLE;
			endcase

end

end

end

/*	
			M2_FETCH0: begin
	 
			SRAM_we_n <= 1'b1; 
			M2_SRAM_address <= pre_IDCT_Y+(row_address<<8) + (row_address<<6) + column_address;
			s_counter <= s_counter + 1'd1;
			
			M2_state <= M2_FETCH1;
			
	*/	
	
always_comb begin

case (M2_state)

	default : begin

		Mult_1_op1 = 32'd0;
		Mult_2_op1 = 32'd0;
		Mult_3_op1 = 32'd0;
		Mult_4_op1 = 32'd0;
		Mult_1_op2 = 32'd0;
		Mult_2_op2 = 32'd0;
		Mult_3_op2 = 32'd0;
		Mult_4_op2 = 32'd0;

	end 
	
	M2_COMPUTE_T3: begin    //be ready at M2_COMPUTE_T3
	
				Mult_1_op1 = read_data_a[0][31:16];//S
				Mult_1_op2 = read_data_a[1][31:16];//C
				Mult_2_op1 = read_data_a[0][15:0];
				Mult_2_op2 = read_data_a[1][15:0];
				Mult_3_op1 = read_data_b[0][31:16];
				Mult_3_op2 = read_data_b[1][31:16];
				Mult_4_op1 = read_data_b[0][15:0];
				Mult_4_op2 = read_data_b[1][15:0];
	end
	
	
	M2_COMPUTE_T4:  begin 
	
				Mult_1_op1 = read_data_a[0][31:16];
				Mult_1_op2 = read_data_a[1][31:16];
				Mult_2_op1 = read_data_a[0][15:0];
				Mult_2_op2 = read_data_a[1][15:0];
				Mult_3_op1 = read_data_b[0][31:16];
				Mult_3_op2 = read_data_b[1][31:16];
				Mult_4_op1 = read_data_b[0][15:0];
				Mult_4_op2 = read_data_b[1][15:0];

	end
	
	
endcase
	
	end
	
	endmodule
